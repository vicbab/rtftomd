require 'anystyle'
require 'serrano'
require 'bibtex'


module BibParser
  def get_ref(ref)
    configure_serrano
    ref = AnyStyle.parse ref, format: 'bibtex'
    return fetch_metadata(ref.to_s)
  end

  def fetch_metadata(entry)
    res = ""
    doi = find_doi(entry)
    title = find_title(entry)
    author = find_author(entry)
    meta_original = entry.force_encoding('UTF-8')
    puts meta_original.length
    puts "DOI: #{doi}"
    if doi
      begin
        puts "Extracting metadata..."
        meta_xref = Serrano.content_negotiation(ids: doi, format: "bibtex")
        if meta_original.length < meta_xref.length
          res = meta_xref
        else
          res = meta_original
        end
      rescue => e
        puts "Error occurred while extracting metadata: #{e.message}"
        res = entry
      end
    else
      puts "No DOI found"
      puts "Trying to fetch metadata..."
      found_doi = Serrano.works(query: title, query_author: author, sort: 'relevance', order: "desc", format: 'bibtex')['message']['items'].first["DOI"]
      meta_xref = Serrano.content_negotiation(ids: found_doi, format: "bibtex")
      if meta_original.length < meta_xref.length
        res = meta_xref
      else
        res = meta_original
      end
    end
    return res
  end

  def parse(fileToParse)
    file = File.open(fileToParse, "r")

    # Make a copy
    file_copy = File.open("#{fileToParse}.txt", "w")

    content = file.read.encode('UTF-8', :invalid => :replace, :undef => :replace, :replace => '')
    content = content.gsub("*", "")
    content = content.gsub(">", "")
    content = content.gsub(/\[\^\d+\]:\s+.*/, "")

    file_copy.write(content)
    file_copy.close
    file.close

    refs = AnyStyle.find file_copy.path

    bib = AnyStyle.parse refs.to_s.split("\","), format: 'bibtex'
    bib = bib.to_s.gsub("[\"", "")

    bib = bib.split("@")

    new_bib = ""

    puts "Clearing files..."
    File.write("#{fileToParse}.bib", "% This file was generated by the BibParser module\n\n", mode: "w")
    File.write("#{fileToParse}_original.bib", "% This file was generated by the BibParser module\n\n", mode: "w")

    for i in bib
      unless i.length == 0
        res = fetch_metadata(i)
        new_bib += res
        File.write("#{fileToParse}_original.bib", " @"+i+"\n", File.size("#{fileToParse}_original.bib"), mode: "a")
        if res.start_with?(" @")
          File.write("#{fileToParse}.bib", res+"\n", File.size("#{fileToParse}.bib"), mode: "a")
        else
          File.write("#{fileToParse}.bib", " @"+res+"\n", File.size("#{fileToParse}.bib"), mode: "a")
        end
      end
    end

    return new_bib
  end

  def format_keys(entry)
    #TODO
  end

  def find_doi(entry)
    doi = entry.match(/doi = \{(.+?)\}/)
    if doi
      doi = doi[1]
    else
      doi = nil
    end
    return doi
  end

  def find_title(entry)
    title = entry.match(/title = \{(.+?)\}/)
    if title
      title = title[1]
    else
      title = nil
    end
    return title
  end

  def find_author(entry)
    author = entry.match(/author = \{(.+?)\}/)
    if author
      author = author[1]
    else
      author = nil
    end
    return author
  end

  def extract_from_doi(doi)
    return Serrano.content_negotiation(ids: doi, format: "bibtex")
  end

  def configure_serrano
    Serrano.configuration do |config|
      config.mailto = "web@lampadaire.ca"
    end
  end

  def run(file)
    configure_serrano
    # title = "force de loi"
    # author = "jacques derrida"
    # puts Serrano.works(query: ".bibliographic=#{title}&query.author=#{author}", format: "bibtex")
    bib = parse(file)
  end

  module_function :parse, :fetch_metadata, :format_keys, :find_doi, :extract_from_doi, :configure_serrano, :run, :find_title, :find_author, :get_ref
end
